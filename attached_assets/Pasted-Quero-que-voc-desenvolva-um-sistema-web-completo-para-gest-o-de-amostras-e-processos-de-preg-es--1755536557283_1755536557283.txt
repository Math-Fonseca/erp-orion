Quero que voc√™ desenvolva um sistema web completo para gest√£o de **amostras e processos de preg√µes**.  
Use boas pr√°ticas de programa√ß√£o, arquitetura MVC, banco relacional e design responsivo e moderno.  

## üîß Tecnologias sugeridas
- Backend: Python (Django + Django Rest Framework) ou Flask (com blueprints organizados em MVC).  
- Frontend: React (com TailwindCSS e shadcn/ui para design limpo e responsivo).  
- Banco de dados: PostgreSQL.  
- ORM: Django ORM (se Django) ou SQLAlchemy (se Flask).  
- Machine Learning: scikit-learn (para viabilidade de amostras).  
- NLP: TF-IDF + Similaridade cosseno para hist√≥rico inteligente.  
- Autentica√ß√£o: JWT ou sess√£o, com pap√©is (admin, analista, consulta).  
- Deploy: Docker-ready.  

---

## üìÇ Estrutura do Projeto
- `backend/`
  - `models/` (modelos ORM: Preg√µes, Itens, Amostras, Empenhos, Cat√°logo, Hist√≥rico, ML)
  - `controllers/` (l√≥gica de neg√≥cio: regras, c√°lculos, ML, importa√ß√£o)
  - `routes/` (endpoints REST)
  - `services/` (servi√ßos auxiliares: parsing Excel/PDF, NLP, ML)
  - `tests/` (testes unit√°rios)
- `frontend/`
  - `components/` (bot√µes, cards, tabelas, modais)
  - `pages/` (Amostras, Processos, Cat√°logo, Hist√≥rico, Dashboard)
  - `services/` (chamadas API para backend)
  - `styles/` (Tailwind config + design system)
- `docker-compose.yml`
- `requirements.txt` ou `pyproject.toml`

---

## üìå Funcionalidades obrigat√≥rias

### 1. M√≥dulo Amostras
- Importar planilhas (Excel/PDF/XML) ‚Üí parser autom√°tico usando pandas, openpyxl, tabula, pytesseract (OCR).  
- Criar **Preg√£o de Amostras** com:
  - N¬∫ do preg√£o, UASG, √≥rg√£o, data de envio, c√≥digo de rastreio, data de retorno, status, op√ß√£o ‚Äúser√° abatido‚Äù.  
- Dentro do preg√£o ‚Üí cadastrar **itens** com:
  - C√≥digo interno (OR, 6B, AD, etc.), descri√ß√£o, marca, lote, quantidade.  
  - Resultado: Aprovado / Reprovado (se reprovado ‚Üí campo motivo).  
- Encerramento do preg√£o quando todos os itens tiverem resultado ou retorno/abatimento.  
- Dashboard com lista de preg√µes de amostras e filtros.  

### 2. M√≥dulo Processos (Arrematados / Saldo / Empenhos / Vencidos)
- Cadastro de preg√µes homologados (n¬∫, √≥rg√£o, UASG, tipo de contrata√ß√£o: Registro de Pre√ßos, Compra Direta, Dispensa, Compra Direta + RP).  
- Registrar data de ata/contrato ‚Üí sistema calcula **vig√™ncia autom√°tica**.  
- Cadastrar itens arrematados (do cat√°logo ou novos).  
- Controle de **saldo** autom√°tico.  
- Registrar **empenhos**: n¬∫, data, √≥rg√£o, itens/quantidades ‚Üí sistema abate saldo.  
- Relat√≥rio **Arrematados x Empenhados** (% realizado, n¬∫ de empenhos, saldo, vencido).  
- Ao vencer ‚Üí preg√£o movido para se√ß√£o de vencidos automaticamente.  

### 3. Cat√°logo de Itens
- Banco central de itens com:
  - C√≥digo (OR, 6B, AD, etc.), descri√ß√£o, marca.  
- No cadastro ‚Üí escolher item do cat√°logo ou criar novo.  

### 4. Hist√≥rico Inteligente
- Sistema reconhece quando item j√° foi enviado como amostra em preg√µes passados.  
- Busca por similaridade de texto (TF-IDF + Coseno).  
- Tela de pesquisa para mostrar itens relacionados e preg√µes anteriores.  

### 5. Machine Learning ‚Äì Viabilidade de Amostras
- Treinar modelo ML (scikit-learn Logistic Regression/XGBoost).  
- Entrada: quantidade, valor unit√°rio, valor total, √≥rg√£o, marca, tipo de item.  
- Sa√≠da: **Vi√°vel / N√£o Vi√°vel** + score.  
- Regras b√°sicas + ML.  
- Aprendizado cont√≠nuo com novos dados de aprova√ß√£o/reprova√ß√£o.  

---

## üé® Requisitos de Design
- Frontend responsivo (desktop, tablet, celular).  
- TailwindCSS + shadcn/ui ‚Üí bot√µes arredondados, cards com sombra suave, gr√°ficos simples (recharts).  
- Dashboard inicial com:
  - Preg√µes de amostras em andamento.  
  - Preg√µes homologados ativos e vencendo.  
  - KPIs: taxa de aprova√ß√£o de amostras, % empenhado vs arrematado.  
- UX limpa e organizada (grid layouts, navega√ß√£o lateral, filtros em tabelas).  

---

## üìä Banco de Dados (DDL sugerida)
### Tabelas principais:
- `usuarios` (id, nome, email, senha_hash, perfil)  
- `catalogo_itens` (id, codigo, descricao, marca)  
- `pregoes_amostras` (id, numero, uasg, orgao, data_envio, rastreio, data_retorno, sera_abatido, status)  
- `amostra_itens` (id, fk_pregao, fk_item, lote, quantidade, resultado, motivo)  
- `pregoes_processos` (id, numero, uasg, orgao, tipo_contratacao, data_ata, vigencia_meses, status)  
- `processo_itens` (id, fk_pregao, fk_item, quantidade_arrematada, quantidade_empenhada, saldo)  
- `empenhos` (id, fk_pregao, numero_empenho, data, orgao)  
- `empenho_itens` (id, fk_empenho, fk_processo_item, quantidade)  
- `historico_relacionamentos` (id, fk_item, fk_item_relacionado, similaridade_score)  
- `ml_predictions` (id, fk_amostra_item, score, viavel, modelo_versao)  

---

## ‚úÖ Requisitos finais
- Seguir boas pr√°ticas (MVC, DRY, testes unit√°rios).  
- Sistema modular e expans√≠vel (futuro: estoque, importa√ß√µes, qualidade).  
- Responsivo, moderno, f√°cil de usar.  
- API documentada (Swagger/OpenAPI).  
- Exporta√ß√£o de relat√≥rios (Excel/CSV).  

Entreg√°veis:  
- Backend + Frontend funcionando.  
- Docker Compose para subir localmente.  
- README com instru√ß√µes.  
- Telas com design bonito, intuitivo e responsivo.  
